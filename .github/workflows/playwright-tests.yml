name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright

jobs:
  # Install dependencies and cache them
  install:
    runs-on: ubuntu-latest
    outputs:
      playwright-version: ${{ steps.playwright-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(npm list @playwright/test --depth=0 --json | jq -r '.dependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

  # Unit tests with Jest
  unit-tests:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload Jest coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit
          name: unit-tests

  # Lint and type checking
  lint-and-typecheck:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npm run type-check

  # Playwright E2E tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: install
    strategy:
      matrix:
        project: [e2e-chromium, e2e-firefox, e2e-webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ needs.install.outputs.playwright-version }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npx playwright test --config=playwright.comprehensive.config.ts --project=${{ matrix.project }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-results-${{ matrix.project }}
          path: |
            test-results/
            coverage/

  # Mobile E2E tests
  mobile-tests:
    runs-on: ubuntu-latest
    needs: install
    strategy:
      matrix:
        project: [e2e-mobile-chrome, e2e-mobile-safari]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ needs.install.outputs.playwright-version }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run mobile tests
        run: npx playwright test --config=playwright.comprehensive.config.ts --project=${{ matrix.project }}

      - name: Upload mobile test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-mobile-results-${{ matrix.project }}
          path: |
            test-results/
            coverage/

  # Accessibility tests
  accessibility-tests:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ needs.install.outputs.playwright-version }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run accessibility tests
        run: npm run test:accessibility

      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-results
          path: |
            test-results/
            coverage/

  # Performance tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ needs.install.outputs.playwright-version }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run performance tests
        run: npm run test:performance

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: |
            test-results/
            coverage/

  # Responsive design tests
  responsive-tests:
    runs-on: ubuntu-latest
    needs: install
    strategy:
      matrix:
        project: [responsive-small, responsive-tablet, responsive-desktop, responsive-wide]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ needs.install.outputs.playwright-version }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run responsive tests
        run: npx playwright test --config=playwright.comprehensive.config.ts --project=${{ matrix.project }}

      - name: Upload responsive results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: responsive-results-${{ matrix.project }}
          path: |
            test-results/
            coverage/

  # Coverage tests
  coverage-tests:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ needs.install.outputs.playwright-version }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run coverage tests
        run: npm run test:coverage:full

      - name: Upload Playwright coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: playwright
          name: playwright-tests

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage/
            test-results/

  # Visual regression tests (only on main branch)
  visual-tests:
    runs-on: ubuntu-latest
    needs: install
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ needs.install.outputs.playwright-version }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run visual regression tests
        run: npm run test:visual

      - name: Upload visual test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: visual-regression-results
          path: |
            test-results/
            coverage/

  # Test summary and reporting
  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, lint-and-typecheck, e2e-tests, mobile-tests, accessibility-tests, performance-tests, responsive-tests, coverage-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate test summary
        run: |
          echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lint & Type Check: ${{ needs.lint-and-typecheck.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Mobile Tests: ${{ needs.mobile-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Responsive Tests: ${{ needs.responsive-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage Tests: ${{ needs.coverage-tests.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v3
        with:
          name: all-test-results
          path: |
            ./*-results/
            ./coverage-reports/

  # Deployment preview (for pull requests)
  deploy-preview:
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: github.event_name == 'pull_request' && needs.test-summary.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy preview
        run: |
          echo "Preview deployment would happen here"
          echo "All tests passed - ready for deployment"